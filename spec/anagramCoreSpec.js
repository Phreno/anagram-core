// Generated by CoffeeScript 1.10.0
(function() {
  require('../index.js');

  describe('noAccent', function() {
    return it('doit retourner une chaine sans accent', function() {
      return expect('bepo').toBe('bépo'.noAccent());
    });
  });

  describe('noWhiteSpace', function() {
    return it('doit supprimer tous les espaces d\'une chaîne', function() {
      return expect('bépo').toBe('b  é \t p \n o'.noWhiteSpace());
    });
  });

  describe('anagramSanitization', function() {
    return it('doit supprimer les espaces et les accents', function() {
      return expect('bepo').toBe('b épo'.anagramSanitization());
    });
  });

  describe('isAnagram', function() {
    it('vrai si l\'argument est une anagramme', function() {
      return expect(true).toBe('bépo'.isAnagram('ep\nb ô'));
    });
    return it('faux si l\'argument n\'est pas une anagramme', function() {
      return expect(false).toBe('bépo'.isAnagram('auie'));
    });
  });

  describe('palindrome', function() {
    return it('doit retourner le palindrome', function() {
      return expect('opéb').toBe('bépo'.palindrome());
    });
  });

  describe('isPalindrome', function() {
    it('vrai si le texte est réversible', function() {
      expect(true).toBe('ébe'.isPalindrome());
      return expect(true).toBe('eb e'.isPalindrome());
    });
    return it('faux si le texte n\'est pas réversible', function() {
      return expect(false).toBe('bépo'.isPalindrome());
    });
  });

  describe('isPalindromeOf', function() {
    it('vrai si le texte est un palindrome de l\'argument', function() {
      return expect(true).toBe('be po'.isPalindromeOf('ô\tpé\nb'));
    });
    return it('faux si le texte n\'est pas un palindrome de l\'argument', function() {
      return expect(false).toBe('bépo'.isPalindromeOf('auie'));
    });
  });

  describe('palindromicIndexOf', function() {
    it('retourne l\'index de la sous-chaîne assaînie', function() {
      expect(1).toBe('bépo'.palindromicIndexOf('pe'));
      return expect(2).toBe('bépo'.palindromicIndexOf('op'));
    });
    return it('retourne -1 si introuvable', function() {
      return expect(-1).toBe('bépo'.palindromicIndexOf('àyx'));
    });
  });

  describe('filterPalindromicLines', function() {
    return it('retourne les palindromes d\'un texte sous forme de tableau', function() {
      var palindromes;
      palindromes = 'bbb\nbépo\nauie\nauieeiau\nbépoopéb\n.àyàyxh.g.'.filterPalindromicLines();
      return expect(2).toBe(palindromes.length);
    });
  });

  describe('signature', function() {
    return it('retourne un objet qui dénombre les occurences', function() {
      var expected, signature;
      signature = JSON.stringify('b épo\n\to'.signature());
      expected = JSON.stringify({
        b: 1,
        e: 1,
        p: 1,
        o: 2
      });
      return expect(expected).toBe(signature);
    });
  });

  describe('frequencySort', function() {
    return it('retourne une chaîne triée par ordre de fréquence', function() {
      return expect('eaiioouéppbè').toBe('bépoopèieaui'.sortByFrequency());
    });
  });

  describe('completion', function() {
    return it('retourne tous les mots commençant par le mot', function() {
      return expect(134).toBe('ana'.completion().length);
    });
  });

  describe('substractWord', function() {
    return it('renvoie une signature détuite', function() {
      var expected, substract;
      expected = JSON.stringify({
        'b': 1,
        'o': 2
      });
      substract = JSON.stringify('bépooo'.substractWord('epo'));
      expect(expected).toBe(substract);
      expect(-2).toBe('bépo'.substractWord('ooo')['o']);
      return expect(-1).toBe('bépo'.substractWord('a')['a']);
    });
  });

  describe('containsAllCharsFrom', function() {
    return it('vrai si les lettres peuvent servir a la composition du mot', function() {
      expect(true).toBe('bépo'.containsAllCharsFrom('obpé'));
      expect(true).toBe('ébpo'.containsAllCharsFrom('ôe'));
      return expect(false).toBe('bépo'.containsAllCharsFrom('auie'));
    });
  });

  describe('elligiblesForAnagram', function() {
    return it('retrouve tous les mots elligibles', function() {
      var anagrams;
      anagrams = "analogie".elligiblesForAnagram();
      expect(141).toBe(anagrams.length);
      expect(-1).not.toBe(anagrams.indexOf("analogie"));
      return expect(-1).not.toBe(anagrams.indexOf("loge"));
    });
  });

  describe('rawConcatenation', function() {
    return it('doit concaténer toutes les valeurs d\'un objet', function() {
      return expect('abcc').toBe({
        a: 1,
        b: 1,
        c: 2
      }.rawConcatenation());
    });
  });

}).call(this);
